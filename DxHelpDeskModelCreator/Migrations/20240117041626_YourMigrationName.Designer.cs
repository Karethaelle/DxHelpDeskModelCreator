// <auto-generated />
using System;
using DxHelpDeskModelCreator.Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DxHelpDeskModelCreator.Migrations
{
    [DbContext(typeof(DxHelpDeskDBContext))]
    [Migration("20240117041626_YourMigrationName")]
    partial class YourMigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Branchowner", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BranchId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "BranchId" }, "BranchId");

                    b.ToTable("branchowners", (string)null);
                });

            modelBuilder.Entity("Companyowner", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CompanyId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CompanyId" }, "CompanyId");

                    b.ToTable("companyowners", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Audittrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableAffected")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("audittrail", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompanyId" }, "CompanyId")
                        .HasDatabaseName("CompanyId1");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Commonproblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("text");

                    b.Property<string>("IssueTitle")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Solution")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("commonproblems", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Permissions")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssigneeId" }, "AssigneeId");

                    b.HasIndex(new[] { "PriorityId" }, "PriorityId");

                    b.HasIndex(new[] { "StatusId" }, "StatusId");

                    b.HasIndex(new[] { "TypeId" }, "TypeId");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId1");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketattachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("blob");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TicketId" }, "TicketId");

                    b.ToTable("ticketattachments", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketcomment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TicketId" }, "TicketId")
                        .HasDatabaseName("TicketId1");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId2");

                    b.ToTable("ticketcomments", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketduration", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("int");

                    b.HasKey("TicketId")
                        .HasName("PRIMARY");

                    b.ToTable("ticketduration", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketpriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ticketpriority", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ticketstatus", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Tickettype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tickettypes", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Username" }, "Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Userrole", b =>
                {
                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "RoleId" }, "RoleId");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("Branchowner", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("branchowners_ibfk_2");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("branchowners_ibfk_1");
                });

            modelBuilder.Entity("Companyowner", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("companyowners_ibfk_2");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("companyowners_ibfk_1");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Audittrail", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", "User")
                        .WithMany("Audittrails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("audittrail_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Branch", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("branches_ibfk_1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticket", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", "Assignee")
                        .WithMany("TicketAssignees")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("tickets_ibfk_2");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Ticketpriority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("tickets_ibfk_5");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Ticketstatus", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("tickets_ibfk_4");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Tickettype", "Type")
                        .WithMany("Tickets")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("tickets_ibfk_3");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", "User")
                        .WithMany("TicketUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("tickets_ibfk_1");

                    b.Navigation("Assignee");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketattachment", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Ticket", "Ticket")
                        .WithMany("Ticketattachments")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("ticketattachments_ibfk_1");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketcomment", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Ticket", "Ticket")
                        .WithMany("Ticketcomments")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("ticketcomments_ibfk_1");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", "User")
                        .WithMany("Ticketcomments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ticketcomments_ibfk_2");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketduration", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Ticket", "Ticket")
                        .WithOne("Ticketduration")
                        .HasForeignKey("DxHelpDeskModelCreator.Entities.Models.Ticketduration", "TicketId")
                        .IsRequired()
                        .HasConstraintName("ticketduration_ibfk_1");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Userrole", b =>
                {
                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("userroles_ibfk_2");

                    b.HasOne("DxHelpDeskModelCreator.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("userroles_ibfk_1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Company", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticket", b =>
                {
                    b.Navigation("Ticketattachments");

                    b.Navigation("Ticketcomments");

                    b.Navigation("Ticketduration");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketpriority", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Ticketstatus", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.Tickettype", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DxHelpDeskModelCreator.Entities.Models.User", b =>
                {
                    b.Navigation("Audittrails");

                    b.Navigation("TicketAssignees");

                    b.Navigation("TicketUsers");

                    b.Navigation("Ticketcomments");
                });
#pragma warning restore 612, 618
        }
    }
}
